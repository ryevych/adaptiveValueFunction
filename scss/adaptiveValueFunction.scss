@function rem($px) {
   $result: math.div($px, 16) + rem;
   @return $result;
}
@function em($px, $current: 16) {
   $result: math.div($px, $current) + em;
   @return $result;
}

//  Secondary function used in adaptiveValueFunction function
@function defineLineParameters($breakPoints, $i) {
   // Defines the parameters of a line drawn through {x1, y1} and {x2, y2} points
   // The points are taken from the $breakPoints list, which looks like (x1, y1, x2, y2, ..., xN, yN)
   // Index $i specifies the choice of starting point - $x1
   // The result is a list of parameters (slope, Y-axis intersection point, line equation)

   $x1: nth($breakPoints, 2 * $i - 1);
   $x2: nth($breakPoints, 2 * $i + 1);
   $y1: nth($breakPoints, 2 * $i);
   $y2: nth($breakPoints, 2 * ($i + 1));

   $k: math.div($y2 - $y1, $x2 - $x1);
   $y0: -($x1 * $k) + $y1;

   $funcExpression: 0; // Optimization of $funcExpression - release from 0 * vw terms
   @if ($k == 0) {
      $funcExpression: #{rem($y0)};
   } @else {
      @if ($y0 != 0) {
         $funcExpression: #{rem($y0)} + " + " + #{$k * 100}vw;
      } @else {
         $funcExpression: #{$k * 100}vw;
      }
   }
   $lineParameters: ();
   $lineParameters: append($lineParameters, $k);
   $lineParameters: append($lineParameters, $y0);
   $lineParameters: append($lineParameters, $funcExpression);
   @return $lineParameters;
}

// Main function
@function adaptiveValueFunction($breakPoints...) {
   // Function that reproduces arbitrary user-defined behavior of a property value.
   //
   // The behavior is specified (tabulated) by breakpoints ($breakpoints).
   // Output in CSS is in relative units (rem).
   //
   // Parameters:
   // $breakPoints -- a list of points defining the behavior of the property in the form
   // 	$viewportWidth_1, $propertyValue_1, ..., $viewportWidth_N, $propertyValue_N.
   // 	Values ​​are specified in pixels without specifying a unit (18px -> 18).
   //  	$viewportWidths are given strictly in ascending order and must be positive,
   //    equal values are not allowed:
   // 	$viewportWidth_1 < $viewportWidth_2 < ... < $viewportWidth_N
   // There are no restrictions on the $propertyValue -- any positive or negative number, and zero.
   //
   // Examples:
   // 	adaptiveValueFunction(320, 20, 900, 30, 1600, 40) --
   // 	at 320px of viewport width the property value is equal to 20px, then at 900px it grows up to 30px, at 1600px - to 40px,
   //    and then continues to grow.
   // 
   // 	adaptiveValueFunction( 320, 5, 991, 5, 992, 20, 1600, 40, 1700, 40) --
   // 	In the range from 320px to 991px the property value is constant at 5px, then at 992px it jumps to 20px,
   // 	and reach the value of 40px at 1600px of screen size. At viewport width greater then 1600px the property value remain constant (40px).
   //
   //	If the viewport width is less than $viewportWidth_1 value, then the behavior of the property is 
   //    approximated by a line from the range [$viewportWidth_1, $viewportWidth_2]; 
   //    if greater than $viewportWidth_N, then using the behavior from the range [$viewportWidth_(N-1), $viewportWidth_N].


   $breakPointsLength: length($breakPoints); // The length of $breakPoints variable (must be an even number)
   $breakPointsPair: math.div($breakPointsLength, 2); // The number of points that define the behavior of property
   $breakPointsEven: $breakPointsPair - math.round($breakPointsPair);
   @if ($breakPointsEven != 0) {
      @error "The list of parameters is too short, or length of parameter list is odd number.";
   }
   @if ($breakPointsLength < 4) {
      @error "The list of parameters is too short, not enough points to define property behavior.";
   } @else {
      @if ($breakPointsPair == 2) {
         // Instant output in CSS if only two pairs of points are given
         $k: math.div(nth($breakPoints, 4) - nth($breakPoints, 2), nth($breakPoints, 3) - nth($breakPoints, 1));
         $y0: -(nth($breakPoints, 1) * $k) + nth($breakPoints, 2);
         $funcExpression: #{rem($y0)} + " + " + #{$k * 100}vw;

         $propertyValue: "";
         @if ($k == 0) {
            $propertyValue: rem($y0);
         } @else {
            @if ($y0 == 0) {
               $propertyValue: #{$k * 100}vw;
            } @else {
               $propertyValue: #{"calc(" + $funcExpression + ")"};
            }
         }
         @return $propertyValue;
      } @else if ($breakPointsPair == 3) {
         // Optimize the result for the case of three pairs of points
         $kList: ();
         $funcExpressionList: ();

         @for $i from 1 through 2 {
            $lineParameters: defineLineParameters($breakPoints, $i);
            $k: nth($lineParameters, 1);
            $y0List: nth($lineParameters, 2);
            $funcExpression: nth($lineParameters, 3);
            $kList: append($kList, $k);
            $funcExpressionList: append($funcExpressionList, $funcExpression);
         }

         $propertyValue: #{nth($funcExpressionList, 1)};
         @if (nth($kList, 2) > nth($kList, 1)) {
            $propertyValue: #{"max(" + $propertyValue + ", " + nth($funcExpressionList, 2) + ")"};
         } @else {
            $propertyValue: #{"min(" + $propertyValue + ", " + nth($funcExpressionList, 2) + ")"};
         }
         @return $propertyValue;
      } @else {
         // Number of input data pairs greater than three

         // Determination of Constant 
         $cumul: 0;
         @for $i from 2 through ($breakPointsPair - 1) {
            $cumul: $cumul + nth($breakPoints, 2 * $i);
         }

         // main block
         $propertyValue: "";
         $propertyValueList: ();
         @for $i from 1 through ($breakPointsPair - 1) {
            $lineParameters: defineLineParameters($breakPoints, $i);
            $y1: nth($breakPoints, 2 * $i);
            $y2: nth($breakPoints, 2 * ($i + 1));
            $k: nth($lineParameters, 1);
            $y0: nth($lineParameters, 2);
            $funcExpression: nth($lineParameters, 3);

            @if ($k == 0) {
               // The value of the property does NOT change in the region between $x1 and $x2
               $cumul: $cumul - $y0;
            } @else {
               // The value of the property changes in the region between $x1 and $x2
               @if ($i == 1) {
                  // Processing the first entry in the result
                  @if ($k > 0) {
                     $propertyValue: #{"min(" + rem($y2) + ", " + $funcExpression + ")"};
                  } @else {
                     $propertyValue: #{"max(" + rem($y2) + ", " + $funcExpression + ")"};
                  }
                  $propertyValueList: append($propertyValueList, $propertyValue);
               } @else if ($i == ($breakPointsPair - 1)) {
                  // Processing the last entry in the result
                  @if ($k > 0) {
                     $propertyValue: #{"max(" + rem($y1) + ", " + $funcExpression + ")"};
                  } @else {
                     $propertyValue: #{"min(" + rem($y1) + ", " + $funcExpression + ")"};
                  }
                  $propertyValueList: append($propertyValueList, $propertyValue);
               } @else {
                  // Intermediate entries in the result
                  $propertyValue: #{"clamp(" +
                     rem(min($y1, $y2)) +
                     ", " +
                     $funcExpression +
                     ", " +
                     rem(max($y1, $y2)) +
                     ")"};
                  $propertyValueList: append($propertyValueList, $propertyValue);
               }
            }
         }
         // Generation of the result
         $propertyValue: nth($propertyValueList, 1);
         @if (length($propertyValueList) != 1) {
            @for $i from 2 through length($propertyValueList) {
               $propertyValue: #{$propertyValue + " + " + nth($propertyValueList, $i)};
            }
         }
         @if ($cumul > 0) {
            $propertyValue: #{"calc(" + $propertyValue + " - " + rem(max($cumul, -$cumul)) + ")"};
         } @else if($cumul < 0) {
            $propertyValue: #{"calc(" + $propertyValue + " + " + rem(max($cumul, -$cumul)) + ")"};
         }
         @return $propertyValue;
      }
   }
}
